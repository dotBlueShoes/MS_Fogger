/* Building Forge */
buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
    }
}

apply plugin: 'net.minecraftforge.gradle';
apply plugin: 'maven-publish';
apply plugin: 'eclipse';

/* Setting up the build variables. */
version = project.minecraftVersion + "-" + GetVersion();
group = "com.github.dotBlueShoes";
archivesBaseName = "fogger";

/* Something i belive is needed for Eclipse only. */
sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8;
compileJava { sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8; }

/* Setting up Minecraft for run. */
minecraft { 
    mappings channel: 'snapshot', version: '20171003-1.12';
    runs {
        client {
            workingDirectory project.file('run');
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP';
            property 'forge.logging.console.level', 'debug';
        }
        server {
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP';
            property 'forge.logging.console.level', 'debug';
        }
    }
}

/* Needed Compiled Files */
dependencies {
    minecraft 'net.minecraftforge:forge:' + project.minecraftVersion + '-' + project.forgeVersion;
}

/* This is required for mcmod.info to be loaded in the first place 
and then reloaded with each build. */
sourceSets { main { output.resourcesDir = output.classesDir; } }

/* Proccesses mcmod.info file variables. */
processResources { 
    /* This will ensure that it will change on build. */
    inputs.property 'mcversion', project.minecraftVersion
    inputs.property 'version', project.version
    inputs.property 'modid', project.archivesBaseName
    /* This replaces mcmod.info variables. */
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        expand ([
            'mcversion': project.minecraftVersion,
            'version': project.version,
            'modid': project.archivesBaseName
        ]);
    }
    /* Means copy everything else except the mcmod.info file. */
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

/* Manifest File. I Guess it's not very needed. 
But still it shows in the .jar file so let the values be. */
jar { 
    manifest {
        attributes([
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "Implementation-Vendor" :"dotBlueShoes",
            "Specification-Vendor": "dotBlueShoes",
            "Implementation-Version": project.version,
            "Implementation-Title": project.name,
            "Specification-Title": project.archivesBaseName,
            "Specification-Version": "1"
        ]);
    }
}


/* Functions */

/* Acquires the version via newest git 'tag'/'release'. 
If it fails it gets an "err-version_b" + build_number. */
String GetVersion() {
    try {
        return GetGitVersion();
    } catch (Exception exception) {
        /* Apperanlty this gets 3 exceptions therefore it's evaluated 3 times. */
        println("Exception: Setting the version via Git failed!");
        return "err_version_b" + GetBuildNumber();
    } 
}
/* Calling git command to acquire major, minor, revision number from tag. */
String GetGitVersion() { 
    def outStream = new ByteArrayOutputStream()
    def result = exec {
        executable = 'git';
        args = [ 'describe', '--tags', '--long' ];
        standardOutput = outStream;
    }
    def fullVersion = outStream.toString().trim();
    def matcher = fullVersion =~ /(\d+).(\d+).(\d+)-(.*)/;
    def mj = matcher[0][1];
    def mn = matcher[0][2];
    def rv = matcher[0][3];
    def bd = GetBuildNumber();
    return "${mj}.${mn}.${rv}.${bd}".toString();
}
/* Acquiring Build Number */
String GetBuildNumber() { 
    def buildFile = file('gradleBuildNumber.properties');
    if( buildFile.canRead() ) {
        Properties versionProperties = new Properties();
        versionProperties.load(new FileInputStream(buildFile));
        return versionProperties['buildNumber'].toString();
    } 
	return "error_build_number";
}

/* Tasks */

/* Declaration of the Increasing Build Number task. */
task incrementBuildNumber; 
/* Sets build number to 0. */
task clearBuildNumber; 

task clearBuildNumber.doLast {
    def versionBuildFile = file('gradleBuildNumber.properties');
    if ( versionBuildFile.canRead() ) {
        Properties versionProperties = new Properties();
        versionProperties.load(new FileInputStream(versionBuildFile));
        versionProperties['buildNumber'] = "0";
        versionProperties.store(versionBuildFile.newWriter(), null);
        println("BuildNumber has been set to 0");
    } else {
        println("Could not find 'gradleBuildNumber.properties' file! Ignoring setting to zero.");
	}
}

incrementBuildNumber.doFirst {
    def versionBuildFile = file('gradleBuildNumber.properties');
    if ( versionBuildFile.canRead() ) {
        Properties versionProperties = new Properties();
        versionProperties.load(new FileInputStream(versionBuildFile));
        int newNumber = versionProperties['buildNumber'].toInteger() + 1;
        versionProperties['buildNumber'] = newNumber.toString();
        versionProperties.store(versionBuildFile.newWriter(), null);
        println("BuildNumber has incremented to: " + newNumber);
    } else 
        println("Could not find 'gradleBuildNumber.properties' file! Ignoring increment.");
}

/* This mean that it's gonna only increment on the successful builds. */
build.finalizedBy incrementBuildNumber; 

// apply plugin: 'net.minecraftforge.gradle'
// // Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
// apply plugin: 'eclipse'
// apply plugin: 'maven-publish'

// version = '1.0'
// group = 'com.yourname.modid' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
// archivesBaseName = 'modid'

// sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

// minecraft {
//     // The mappings can be changed at any time, and must be in the following format.
//     // snapshot_YYYYMMDD   Snapshot are built nightly.
//     // stable_#            Stables are built at the discretion of the MCP team.
//     // Use non-default mappings at your own risk. they may not always work.
//     // Simply re-run your setup task after changing the mappings to update your workspace.
//     //mappings channel: 'snapshot', version: '20171003-1.12'
//     mappings channel: 'snapshot', version: '20171003-1.12'
//     // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
//     // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

//     // Default run configurations.
//     // These can be tweaked, removed, or duplicated as needed.
//     runs {
//         client {
//             workingDirectory project.file('run')

//             // Recommended logging data for a userdev environment
//             property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

//             // Recommended logging level for the console
//             property 'forge.logging.console.level', 'debug'
//         }

//         server {

//             // Recommended logging data for a userdev environment
//             property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

//             // Recommended logging level for the console
//             property 'forge.logging.console.level', 'debug'
//         }
//     }
// }

// dependencies {
//     // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
//     // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
//     // The userdev artifact is a special name and will get all sorts of transformations applied to it.
//     minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2854'

//     // You may put jars on which you depend on in ./libs or you may define them like so..
//     // compile "some.group:artifact:version:classifier"
//     // compile "some.group:artifact:version"

//     // Real examples
//     // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
//     // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

//     // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
//     // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

//     // These dependencies get remapped to your current MCP mappings
//     // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

//     // For more info...
//     // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
//     // http://www.gradle.org/docs/current/userguide/dependency_management.html

// }

// // Example for how to get properties into the manifest for reading by the runtime..
// jar {
//     manifest {
//         attributes([
//             "Specification-Title": "examplemod",
//             "Specification-Vendor": "examplemodsareus",
//             "Specification-Version": "1", // We are version 1 of ourselves
//             "Implementation-Title": project.name,
//             "Implementation-Version": "${version}",
//             "Implementation-Vendor" :"examplemodsareus",
//             "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
//         ])
//     }
// }

// // Example configuration to allow publishing using the maven-publish task
// // This is the preferred method to reobfuscate your jar file
// jar.finalizedBy('reobfJar') 
// // However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// //publish.dependsOn('reobfJar')

// publishing {
//     publications {
//         mavenJava(MavenPublication) {
//             artifact jar
//         }
//     }
//     repositories {
//         maven {
//             url "file:///${project.projectDir}/mcmodsrepo"
//         }
//     }
// }